{"ast":null,"code":"import { createContext, useContext, useMemo, useEffect, useLayoutEffect as useLayoutEffect$1, useRef, useState, useCallback, memo, useId, forwardRef, useImperativeHandle } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nfunction getColSpan(column, lastFrozenColumnIndex, args) {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (Number.isInteger(colSpan) && colSpan > 1 && (!column.frozen || column.idx + colSpan - 1 <= lastFrozenColumnIndex)) {\n    return colSpan;\n  }\n  return undefined;\n}\nfunction stopPropagation(event) {\n  event.stopPropagation();\n}\nfunction scrollIntoView(element) {\n  element?.scrollIntoView({\n    inline: 'nearest',\n    block: 'nearest'\n  });\n}\nfunction createCellEvent(event) {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n  return cellEvent;\n}\nconst nonInputKeys = new Set(['Unidentified', 'Alt', 'AltGraph', 'CapsLock', 'Control', 'Fn', 'FnLock', 'Meta', 'NumLock', 'ScrollLock', 'Shift', 'Tab', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'End', 'Home', 'PageDown', 'PageUp', 'Insert', 'ContextMenu', 'Escape', 'Pause', 'Play', 'PrintScreen', 'F1', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12']);\nfunction isCtrlKeyHeldDown(e) {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\nfunction isDefaultCellInput(event) {\n  const vKey = 86;\n  if (isCtrlKeyHeldDown(event) && event.keyCode !== vKey) return false;\n  return !nonInputKeys.has(event.key);\n}\nfunction onEditorNavigation({\n  key,\n  target\n}) {\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select').length === 1;\n  }\n  return false;\n}\nconst measuringCellClassname = \"mlln6zg7-0-0-beta-43\";\nfunction renderMeasuringCells(viewportColumns) {\n  return viewportColumns.map(({\n    key,\n    idx,\n    minWidth,\n    maxWidth\n  }) => /*#__PURE__*/jsx(\"div\", {\n    className: measuringCellClassname,\n    style: {\n      gridColumnStart: idx + 1,\n      minWidth,\n      maxWidth\n    },\n    \"data-measuring-cell-key\": key\n  }, key));\n}\nfunction isSelectedCellEditable({\n  selectedPosition,\n  columns,\n  rows\n}) {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\nfunction isCellEditableUtil(column, row) {\n  return column.renderEditCell != null && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\nfunction getSelectedCellColSpan({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'HEADER'\n    });\n  }\n  if (topSummaryRows && rowIdx > mainHeaderRowIdx && rowIdx <= topSummaryRowsCount + mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n  }\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n  return undefined;\n}\nfunction getNextSelectedCellPosition({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: {\n    idx: currentIdx,\n    rowIdx: currentRowIdx\n  },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}) {\n  let {\n    idx: nextIdx,\n    rowIdx: nextRowIdx\n  } = nextPosition;\n  const columnsCount = columns.length;\n  const setColSpan = moveNext => {\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n  const getParentRowIdx = parent => {\n    return parent.level + mainHeaderRowIdx;\n  };\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n  if (nextRowIdx < mainHeaderRowIdx) {\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n  return {\n    idx: nextIdx,\n    rowIdx: nextRowIdx\n  };\n}\nfunction canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: {\n    rowIdx,\n    idx\n  },\n  shiftKey\n}) {\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\nconst cell = \"cj343x07-0-0-beta-43\";\nconst cellClassname = `rdg-cell ${cell}`;\nconst cellFrozen = \"csofj7r7-0-0-beta-43\";\nconst cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\nfunction getRowStyle(rowIdx, height) {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    };\n  }\n  return {\n    '--rdg-grid-row-start': rowIdx\n  };\n}\nfunction getHeaderCellStyle(column, rowIdx, rowSpan) {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n  return {\n    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\nfunction getCellStyle(column, colSpan = 1) {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\nfunction getCellClassname(column, ...extraClasses) {\n  return clsx(cellClassname, ...extraClasses, column.frozen && cellFrozenClassname);\n}\nconst {\n  min,\n  max,\n  floor,\n  sign,\n  abs\n} = Math;\nfunction assertIsValidKeyGetter(keyGetter) {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\nfunction clampColumnWidth(width, {\n  minWidth,\n  maxWidth\n}) {\n  width = max(width, minWidth);\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n  return width;\n}\nfunction getHeaderCellRowSpan(column, rowIdx) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\nconst checkboxLabel = \"c1bn88vv7-0-0-beta-43\";\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\nconst checkboxInput = \"c1qt073l7-0-0-beta-43\";\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\nconst checkbox = \"cf71kmq7-0-0-beta-43\";\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\nconst checkboxLabelDisabled = \"c1lwve4p7-0-0-beta-43\";\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\nfunction renderCheckbox({\n  onChange,\n  ...props\n}) {\n  function handleChange(e) {\n    onChange(e.target.checked, e.nativeEvent.shiftKey);\n  }\n  return /*#__PURE__*/jsxs(\"label\", {\n    className: clsx(checkboxLabelClassname, props.disabled && checkboxLabelDisabledClassname),\n    children: [/*#__PURE__*/jsx(\"input\", {\n      type: \"checkbox\",\n      ...props,\n      className: checkboxInputClassname,\n      onChange: handleChange\n    }), /*#__PURE__*/jsx(\"div\", {\n      className: checkboxClassname\n    })]\n  });\n}\nconst groupCellContent = \"g1s9ylgp7-0-0-beta-43\";\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\nconst caret = \"cz54e4y7-0-0-beta-43\";\nconst caretClassname = `rdg-caret ${caret}`;\nfunction renderToggleGroup(props) {\n  return /*#__PURE__*/jsx(ToggleGroup, {\n    ...props\n  });\n}\nfunction ToggleGroup({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}) {\n  function handleKeyDown({\n    key\n  }) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n  return /*#__PURE__*/jsxs(\"span\", {\n    className: groupCellContentClassname,\n    tabIndex: tabIndex,\n    onKeyDown: handleKeyDown,\n    children: [groupKey, /*#__PURE__*/jsx(\"svg\", {\n      viewBox: \"0 0 14 8\",\n      width: \"14\",\n      height: \"8\",\n      className: caretClassname,\n      \"aria-hidden\": true,\n      children: /*#__PURE__*/jsx(\"path\", {\n        d: d\n      })\n    })]\n  });\n}\nfunction renderValue(props) {\n  try {\n    return props.row[props.column.key];\n  } catch {\n    return null;\n  }\n}\nconst DataGridDefaultRenderersContext = /*#__PURE__*/createContext(undefined);\nconst DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\nfunction useDefaultRenderers() {\n  return useContext(DataGridDefaultRenderersContext);\n}\nfunction SelectCellFormatter({\n  value,\n  tabIndex,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}) {\n  const renderCheckbox = useDefaultRenderers().renderCheckbox;\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\nconst RowSelectionContext = /*#__PURE__*/createContext(undefined);\nconst RowSelectionProvider = RowSelectionContext.Provider;\nconst RowSelectionChangeContext = /*#__PURE__*/createContext(undefined);\nconst RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\nfunction useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\nconst SELECT_COLUMN_KEY = 'select-row';\nfunction HeaderRenderer(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select All\",\n    tabIndex: props.tabIndex,\n    value: isRowSelected,\n    onChange: checked => {\n      onRowSelectionChange({\n        type: 'HEADER',\n        checked\n      });\n    }\n  });\n}\nfunction SelectFormatter(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select\",\n    tabIndex: props.tabIndex,\n    value: isRowSelected,\n    onChange: (checked, isShiftClick) => {\n      onRowSelectionChange({\n        type: 'ROW',\n        row: props.row,\n        checked,\n        isShiftClick\n      });\n    }\n  });\n}\nfunction SelectGroupFormatter(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select Group\",\n    tabIndex: props.tabIndex,\n    value: isRowSelected,\n    onChange: checked => {\n      onRowSelectionChange({\n        type: 'ROW',\n        row: props.row,\n        checked,\n        isShiftClick: false\n      });\n    }\n  });\n}\nconst SelectColumn = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return /*#__PURE__*/jsx(HeaderRenderer, {\n      ...props\n    });\n  },\n  renderCell(props) {\n    return /*#__PURE__*/jsx(SelectFormatter, {\n      ...props\n    });\n  },\n  renderGroupCell(props) {\n    return /*#__PURE__*/jsx(SelectGroupFormatter, {\n      ...props\n    });\n  }\n};\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\nfunction useCalculatedColumns({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultCellRenderer = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount\n  } = useMemo(() => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns = [];\n    collectColumns(rawColumns, 1);\n    function collectColumns(rawColumns, level, parent) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n        const frozen = rawColumn.frozen ?? false;\n        const column = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultCellRenderer\n        };\n        columns.push(column);\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n    columns.sort(({\n      key: aKey,\n      frozen: frozenA\n    }, {\n      key: bKey,\n      frozen: frozenB\n    }) => {\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n      return 0;\n    });\n    const colSpanColumns = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [rawColumns, defaultWidth, defaultMinWidth, defaultMaxWidth, defaultCellRenderer, defaultResizable, defaultSortable, defaultDraggable]);\n  const {\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth,\n    columnMetrics\n  } = useMemo(() => {\n    const columnMetrics = new Map();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns = [];\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, {\n        width,\n        left\n      });\n      left += width;\n    }\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex]);\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n    const layoutCssVars = {};\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column).left}px`;\n    }\n    return {\n      templateColumns,\n      layoutCssVars,\n      totalFrozenColumnWidth,\n      columnMetrics\n    };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo(() => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const {\n        left,\n        width\n      } = columnMetrics.get(columns[colVisibleStartIdx]);\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const {\n        left,\n        width\n      } = columnMetrics.get(columns[colVisibleEndIdx]);\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columnMetrics, columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth, enableVirtualization]);\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\nfunction updateColumnParent(column, index, level) {\n  if (level < column.level) {\n    column.level = level;\n  }\n  if (column.parent !== undefined) {\n    const {\n      parent\n    } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\nconst useLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect$1;\nfunction useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex = columns.length === viewportColumns.length;\n  const ignorePreviouslyMeasuredColumns = columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure = [];\n  for (const {\n    key,\n    idx,\n    width\n  } of viewportColumns) {\n    if (typeof width === 'string' && (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) && !resizedColumnWidths.has(key)) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n  function updateMeasuredWidths(columnsToMeasure) {\n    if (columnsToMeasure.length === 0) return;\n    setMeasuredColumnWidths(measuredColumnWidths => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n  function handleColumnResize(column, nextWidth) {\n    const {\n      key: resizingKey\n    } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure = [];\n    for (const {\n      key,\n      idx,\n      width\n    } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n    gridRef.current.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth = typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey);\n    flushSync(() => {\n      setResizedColumnWidths(resizedColumnWidths => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  };\n}\nfunction measureColumnWidth(gridRef, key) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\nfunction useGridDimensions() {\n  const gridRef = useRef(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = useState(0);\n  useLayoutEffect(() => {\n    const {\n      ResizeObserver\n    } = window;\n    if (ResizeObserver == null) return;\n    const {\n      clientWidth,\n      clientHeight,\n      offsetWidth,\n      offsetHeight\n    } = gridRef.current;\n    const {\n      width,\n      height\n    } = gridRef.current.getBoundingClientRect();\n    const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - initialHorizontalScrollbarHeight;\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n    const resizeObserver = new ResizeObserver(entries => {\n      const size = entries[0].contentBoxSize[0];\n      const {\n        clientHeight,\n        offsetHeight\n      } = gridRef.current;\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n        setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n      });\n    });\n    resizeObserver.observe(gridRef.current);\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n  return [gridRef, inlineSize, blockSize, horizontalScrollbarHeight];\n}\nfunction useLatestFunc(fn) {\n  const ref = useRef(fn);\n  useEffect(() => {\n    ref.current = fn;\n  });\n  const callbackFn = useCallback((...args) => {\n    ref.current(...args);\n  }, []);\n  return fn ? callbackFn : fn;\n}\nfunction useRovingTabIndex(isSelected) {\n  const [isChildFocused, setIsChildFocused] = useState(false);\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n  function onFocus(event) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n  const isFocusable = isSelected && !isChildFocused;\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\nfunction useViewportColumns({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}) {\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n    let startIdx = colOverscanStartIdx;\n    const updateStartIdx = (colIdx, colSpan) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n        type: 'HEADER'\n      }))) {\n        break;\n      }\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n          type: 'ROW',\n          row\n        }))) {\n          break;\n        }\n      }\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n            type: 'SUMMARY',\n            row\n          }))) {\n            break;\n          }\n        }\n      }\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n            type: 'SUMMARY',\n            row\n          }))) {\n            break;\n          }\n        }\n      }\n    }\n    return startIdx;\n  }, [rowOverscanStartIdx, rowOverscanEndIdx, rows, topSummaryRows, bottomSummaryRows, colOverscanStartIdx, lastFrozenColumnIndex, colSpanColumns]);\n  return useMemo(() => {\n    const viewportColumns = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\nfunction useViewportRows({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}) {\n  const {\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: rowIdx => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: offset => floor(offset / rowHeight)\n      };\n    }\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    const rowPositions = rows.map(row => {\n      const currentRowHeight = rowHeight(row);\n      const position = {\n        top: totalRowHeight,\n        height: currentRowHeight\n      };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n    const validateRowIdx = rowIdx => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: rowIdx => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: rowIdx => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n          if (currentOffset === offset) return middle;\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\nconst cellDragHandle = \"c1w9bbhr7-0-0-beta-43\";\nconst cellDragHandleFrozenClassname = \"c1creorc7-0-0-beta-43\";\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\nfunction DragHandle({\n  gridRowStart,\n  rows,\n  column,\n  columnWidth,\n  maxColIdx,\n  isLastRow,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  onClick,\n  setDragging,\n  setDraggedOverRowIdx\n}) {\n  const {\n    idx,\n    rowIdx\n  } = selectedPosition;\n  function handleMouseDown(event) {\n    event.preventDefault();\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n    function onMouseOver(event) {\n      if (event.buttons !== 1) onMouseUp();\n    }\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n  function handleDoubleClick(event) {\n    event.stopPropagation();\n    updateRows(rowIdx + 1, rows.length);\n  }\n  function updateRows(startRowIdx, endRowIdx) {\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({\n        rowIdx: i,\n        idx\n      })) {\n        const updatedRow = onFill({\n          columnKey: column.key,\n          sourceRow,\n          targetRow: rows[i]\n        });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, {\n        indexes,\n        column\n      });\n    }\n  }\n  function getStyle() {\n    const colSpan = column.colSpan?.({\n      type: 'ROW',\n      row: rows[rowIdx]\n    }) ?? 1;\n    const {\n      insetInlineStart,\n      ...style\n    } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n    return {\n      ...style,\n      gridRowStart,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)` : undefined\n    };\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    style: getStyle(),\n    className: clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname),\n    onClick: onClick,\n    onMouseDown: handleMouseDown,\n    onDoubleClick: handleDoubleClick\n  });\n}\nconst cellEditing = \"cis5rrm7-0-0-beta-43\";\nfunction EditCell({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}) {\n  const frameRequestRef = useRef();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n    addEventListener('mousedown', onWindowCaptureMouseDown, {\n      capture: true\n    });\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, {\n        capture: true\n      });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current);\n  }\n  function handleKeyDown(event) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown({\n        mode: 'EDIT',\n        row,\n        column,\n        rowIdx,\n        navigate() {\n          navigate(event);\n        },\n        onClose\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (event.key === 'Escape') {\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n  function onEditorRowChange(row, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n  const {\n    cellClass\n  } = column;\n  const className = getCellClassname(column, 'rdg-editor-container', typeof cellClass === 'function' ? cellClass(row) : cellClass, !column.editorOptions?.displayCellContent && cellEditing);\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": true,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onKeyDown: handleKeyDown,\n    onMouseDownCapture: cancelFrameRequest,\n    children: column.renderEditCell != null && /*#__PURE__*/jsxs(Fragment, {\n      children: [column.renderEditCell({\n        column,\n        row,\n        onRowChange: onEditorRowChange,\n        onClose\n      }), column.editorOptions?.displayCellContent && column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: true,\n        tabIndex: -1,\n        onRowChange: onEditorRowChange\n      })]\n    })\n  });\n}\nfunction GroupedColumnHeaderCell({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}) {\n  const {\n    tabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const {\n    colSpan\n  } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n  function onClick() {\n    selectCell({\n      idx: column.idx,\n      rowIdx\n    });\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"columnheader\",\n    \"aria-colindex\": index,\n    \"aria-colspan\": colSpan,\n    \"aria-rowspan\": rowSpan,\n    \"aria-selected\": isCellSelected,\n    tabIndex: tabIndex,\n    className: clsx(cellClassname, column.headerCellClass),\n    style: {\n      ...getHeaderCellStyle(column, rowIdx, rowSpan),\n      gridColumnStart: index,\n      gridColumnEnd: index + colSpan\n    },\n    onFocus: onFocus,\n    onClick: onClick,\n    children: column.name\n  });\n}\nconst headerSortCellClassname = \"h44jtk67-0-0-beta-43\";\nconst headerSortName = \"hcgkhxz7-0-0-beta-43\";\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\nfunction renderHeaderCell({\n  column,\n  sortDirection,\n  priority\n}) {\n  if (!column.sortable) return column.name;\n  return /*#__PURE__*/jsx(SortableHeaderCell, {\n    sortDirection: sortDirection,\n    priority: priority,\n    children: column.name\n  });\n}\nfunction SortableHeaderCell({\n  sortDirection,\n  priority,\n  children\n}) {\n  const renderSortStatus = useDefaultRenderers().renderSortStatus;\n  return /*#__PURE__*/jsxs(\"span\", {\n    className: headerSortCellClassname,\n    children: [/*#__PURE__*/jsx(\"span\", {\n      className: headerSortNameClassname,\n      children: children\n    }), /*#__PURE__*/jsx(\"span\", {\n      children: renderSortStatus({\n        sortDirection,\n        priority\n      })\n    })]\n  });\n}\nconst cellSortableClassname = \"c6l2wv17-0-0-beta-43\";\nconst cellResizable = \"c1kqdw7y7-0-0-beta-43\";\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\nconst resizeHandleClassname = \"r1y6ywlx7-0-0-beta-43\";\nconst cellDraggableClassname = 'rdg-cell-draggable';\nconst cellDragging = \"c1bezg5o7-0-0-beta-43\";\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\nconst cellOver = \"c1vc96037-0-0-beta-43\";\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\nfunction HeaderCell({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  dragDropKey\n}) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n  const isRtl = direction === 'rtl';\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex(sort => sort.columnKey === column.key);\n  const sortColumn = sortIndex !== undefined && sortIndex > -1 ? sortColumns[sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns.length > 1 ? sortIndex + 1 : undefined;\n  const ariaSort = sortDirection && !priority ? sortDirection === 'ASC' ? 'ascending' : 'descending' : undefined;\n  const {\n    sortable,\n    resizable,\n    draggable\n  } = column;\n  const className = getCellClassname(column, column.headerCellClass, sortable && cellSortableClassname, resizable && cellResizableClassname, draggable && cellDraggableClassname, isDragging && cellDraggingClassname, isOver && cellOverClassname);\n  const renderHeaderCell$1 = column.renderHeaderCell ?? renderHeaderCell;\n  function onPointerDown(event) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n    event.preventDefault();\n    const {\n      currentTarget,\n      pointerId\n    } = event;\n    const headerCell = currentTarget.parentElement;\n    const {\n      right,\n      left\n    } = headerCell.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n    function onPointerMove(event) {\n      const {\n        right,\n        left\n      } = headerCell.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n  function onSort(ctrlClick) {\n    if (onSortColumnsChange == null) return;\n    const {\n      sortDescendingFirst\n    } = column;\n    if (sortColumn === undefined) {\n      const nextSort = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn;\n      if (sortDescendingFirst === true && sortDirection === 'DESC' || sortDescendingFirst !== true && sortDirection === 'ASC') {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns];\n        if (nextSortColumn) {\n          nextSortColumns[sortIndex] = nextSortColumn;\n        } else {\n          nextSortColumns.splice(sortIndex, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n  function onClick(event) {\n    selectCell({\n      idx: column.idx,\n      rowIdx\n    });\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n  function onDoubleClick() {\n    onColumnResize(column, 'max-content');\n  }\n  function handleFocus(event) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      selectCell({\n        idx: 0,\n        rowIdx\n      });\n    }\n  }\n  function onKeyDown(event) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n  function onDragStart(event) {\n    event.dataTransfer.setData(dragDropKey, column.key);\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragging(true);\n  }\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n  function onDragOver(event) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n  function onDrop(event) {\n    setIsOver(false);\n    if (event.dataTransfer.types.includes(dragDropKey)) {\n      const sourceKey = event.dataTransfer.getData(dragDropKey);\n      if (sourceKey !== column.key) {\n        event.preventDefault();\n        onColumnsReorder?.(sourceKey, column.key);\n      }\n    }\n  }\n  function onDragEnter(event) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n  function onDragLeave(event) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n  let draggableProps;\n  if (draggable) {\n    draggableProps = {\n      draggable: true,\n      onDragStart,\n      onDragEnd,\n      onDragOver,\n      onDragEnter,\n      onDragLeave,\n      onDrop\n    };\n  }\n  return /*#__PURE__*/jsxs(\"div\", {\n    role: \"columnheader\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-rowspan\": rowSpan,\n    \"aria-selected\": isCellSelected,\n    \"aria-sort\": ariaSort,\n    tabIndex: shouldFocusGrid ? 0 : tabIndex,\n    className: className,\n    style: {\n      ...getHeaderCellStyle(column, rowIdx, rowSpan),\n      ...getCellStyle(column, colSpan)\n    },\n    onFocus: handleFocus,\n    onClick: onClick,\n    onKeyDown: sortable ? onKeyDown : undefined,\n    ...draggableProps,\n    children: [renderHeaderCell$1({\n      column,\n      sortDirection,\n      priority,\n      tabIndex: childTabIndex\n    }), resizable && /*#__PURE__*/jsx(\"div\", {\n      className: resizeHandleClassname,\n      onClick: stopPropagation,\n      onDoubleClick: onDoubleClick,\n      onPointerDown: onPointerDown\n    })]\n  });\n}\nfunction isEventPertinent(event) {\n  const relatedTarget = event.relatedTarget;\n  return !event.currentTarget.contains(relatedTarget);\n}\nconst row = \"r1upfr807-0-0-beta-43\";\nconst rowClassname = `rdg-row ${row}`;\nconst rowSelected = \"r190mhd37-0-0-beta-43\";\nconst rowSelectedClassname = 'rdg-row-selected';\nconst rowSelectedWithFrozenCell = \"r139qu9m7-0-0-beta-43\";\nconst topSummaryRowClassname = 'rdg-top-summary-row';\nconst bottomSummaryRowClassname = 'rdg-bottom-summary-row';\nconst headerRow = \"h10tskcx7-0-0-beta-43\";\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\nfunction HeaderRow({\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}) {\n  const dragDropKey = useId();\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'HEADER'\n    });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n    cells.push( /*#__PURE__*/jsx(HeaderCell, {\n      column: column,\n      colSpan: colSpan,\n      rowIdx: rowIdx,\n      isCellSelected: selectedCellIdx === column.idx,\n      onColumnResize: onColumnResize,\n      onColumnsReorder: onColumnsReorder,\n      onSortColumnsChange: onSortColumnsChange,\n      sortColumns: sortColumns,\n      selectCell: selectCell,\n      shouldFocusGrid: shouldFocusGrid && index === 0,\n      direction: direction,\n      dragDropKey: dragDropKey\n    }, column.key));\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": rowIdx,\n    className: clsx(headerRowClassname, selectedCellIdx === -1 && rowSelectedClassname),\n    children: cells\n  });\n}\nconst HeaderRow$1 = /*#__PURE__*/memo(HeaderRow);\nfunction GroupedColumnHeaderRow({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}) {\n  const cells = [];\n  const renderedParents = new Set();\n  for (const column of columns) {\n    let {\n      parent\n    } = column;\n    if (parent === undefined) continue;\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const {\n        idx\n      } = parent;\n      cells.push( /*#__PURE__*/jsx(GroupedColumnHeaderCell, {\n        column: parent,\n        rowIdx: rowIdx,\n        isCellSelected: selectedCellIdx === idx,\n        selectCell: selectCell\n      }, idx));\n    }\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": rowIdx,\n    className: headerRowClassname,\n    children: cells\n  });\n}\nconst GroupedColumnHeaderRow$1 = /*#__PURE__*/memo(GroupedColumnHeaderRow);\nconst cellCopied = \"c6ra8a37-0-0-beta-43\";\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\nconst cellDraggedOver = \"cq910m07-0-0-beta-43\";\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\nfunction Cell({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}) {\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const {\n    cellClass\n  } = column;\n  const className = getCellClassname(column, typeof cellClass === 'function' ? cellClass(row) : cellClass, isCopied && cellCopiedClassname, isDraggedOver && cellDraggedOverClassname);\n  const isEditable = isCellEditableUtil(column, row);\n  function selectCellWrapper(openEditor) {\n    selectCell({\n      rowIdx,\n      idx: column.idx\n    }, openEditor);\n  }\n  function handleClick(event) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({\n        row,\n        column,\n        selectCell: selectCellWrapper\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n  function handleContextMenu(event) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({\n        row,\n        column,\n        selectCell: selectCellWrapper\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n  function handleDoubleClick(event) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({\n        row,\n        column,\n        selectCell: selectCellWrapper\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n  function handleRowChange(newRow) {\n    onRowChange(column, newRow);\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": isCellSelected,\n    \"aria-readonly\": !isEditable || undefined,\n    tabIndex: tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onClick: handleClick,\n    onDoubleClick: handleDoubleClick,\n    onContextMenu: handleContextMenu,\n    onFocus: onFocus,\n    ...props,\n    children: column.renderCell({\n      column,\n      row,\n      rowIdx,\n      isCellEditable: isEditable,\n      tabIndex: childTabIndex,\n      onRowChange: handleRowChange\n    })\n  });\n}\nconst Cell$1 = /*#__PURE__*/memo(Cell);\nfunction Row({\n  className,\n  rowIdx,\n  gridRowStart,\n  height,\n  selectedCellIdx,\n  isRowSelected,\n  copiedCellIdx,\n  draggedOverCellIdx,\n  lastFrozenColumnIndex,\n  row,\n  viewportColumns,\n  selectedCellEditor,\n  onCellClick,\n  onCellDoubleClick,\n  onCellContextMenu,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  onRowChange,\n  selectCell,\n  ...props\n}, ref) {\n  const handleRowChange = useLatestFunc((column, newRow) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n  function handleDragEnter(event) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n  className = clsx(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, rowClass?.(row, rowIdx), className, selectedCellIdx === -1 && rowSelectedClassname);\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const {\n      idx\n    } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n    const isCellSelected = selectedCellIdx === idx;\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push( /*#__PURE__*/jsx(Cell$1, {\n        column: column,\n        colSpan: colSpan,\n        row: row,\n        rowIdx: rowIdx,\n        isCopied: copiedCellIdx === idx,\n        isDraggedOver: draggedOverCellIdx === idx,\n        isCellSelected: isCellSelected,\n        onClick: onCellClick,\n        onDoubleClick: onCellDoubleClick,\n        onContextMenu: onCellContextMenu,\n        onRowChange: handleRowChange,\n        selectCell: selectCell\n      }, column.key));\n    }\n  }\n  return /*#__PURE__*/jsx(RowSelectionProvider, {\n    value: isRowSelected,\n    children: /*#__PURE__*/jsx(\"div\", {\n      role: \"row\",\n      ref: ref,\n      className: className,\n      onMouseEnter: handleDragEnter,\n      style: getRowStyle(gridRowStart, height),\n      ...props,\n      children: cells\n    })\n  });\n}\nconst RowComponent = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Row));\nconst RowComponent$1 = RowComponent;\nfunction defaultRenderRow(key, props) {\n  return /*#__PURE__*/jsx(RowComponent, {\n    ...props\n  }, key);\n}\nfunction ScrollToCell({\n  scrollToPosition: {\n    idx,\n    rowIdx\n  },\n  gridElement,\n  setScrollToCellPosition\n}) {\n  const ref = useRef(null);\n  useLayoutEffect(() => {\n    scrollIntoView(ref.current);\n  });\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n    observer.observe(ref.current);\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n  return /*#__PURE__*/jsx(\"div\", {\n    ref: ref,\n    style: {\n      gridColumn: idx === undefined ? '1/-1' : idx + 1,\n      gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n    }\n  });\n}\nconst arrow = \"a3ejtar7-0-0-beta-43\";\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\nfunction renderSortStatus({\n  sortDirection,\n  priority\n}) {\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [renderSortIcon({\n      sortDirection\n    }), renderSortPriority({\n      priority\n    })]\n  });\n}\nfunction renderSortIcon({\n  sortDirection\n}) {\n  if (sortDirection === undefined) return null;\n  return /*#__PURE__*/jsx(\"svg\", {\n    viewBox: \"0 0 12 8\",\n    width: \"12\",\n    height: \"8\",\n    className: arrowClassname,\n    \"aria-hidden\": true,\n    children: /*#__PURE__*/jsx(\"path\", {\n      d: sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'\n    })\n  });\n}\nfunction renderSortPriority({\n  priority\n}) {\n  return priority;\n}\nconst root = \"rnvodz57-0-0-beta-43\";\nconst rootClassname = `rdg ${root}`;\nconst viewportDragging = \"vlqv91k7-0-0-beta-43\";\nconst viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\nconst focusSinkClassname = \"f1lsfrzw7-0-0-beta-43\";\nconst focusSinkHeaderAndSummaryClassname = \"f1cte0lg7-0-0-beta-43\";\nconst summaryCellClassname = \"s8wc6fl7-0-0-beta-43\";\nfunction SummaryCell({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}) {\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const {\n    summaryCellClass\n  } = column;\n  const className = getCellClassname(column, summaryCellClassname, typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass);\n  function onClick() {\n    selectCell({\n      rowIdx,\n      idx: column.idx\n    });\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": isCellSelected,\n    tabIndex: tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onClick: onClick,\n    onFocus: onFocus,\n    children: column.renderSummaryCell?.({\n      column,\n      row,\n      tabIndex: childTabIndex\n    })\n  });\n}\nconst SummaryCell$1 = /*#__PURE__*/memo(SummaryCell);\nconst summaryRow = \"skuhp557-0-0-beta-43\";\nconst topSummaryRow = \"tf8l5ub7-0-0-beta-43\";\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\nfunction SummaryRow({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row\n    });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n    const isCellSelected = selectedCellIdx === column.idx;\n    cells.push( /*#__PURE__*/jsx(SummaryCell$1, {\n      column: column,\n      colSpan: colSpan,\n      row: row,\n      rowIdx: rowIdx,\n      isCellSelected: isCellSelected,\n      selectCell: selectCell\n    }, column.key));\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": ariaRowIndex,\n    className: clsx(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, summaryRowClassname, isTop ? `${topSummaryRowClassname} ${topSummaryRow}` : bottomSummaryRowClassname, selectedCellIdx === -1 && rowSelectedClassname),\n    style: {\n      ...getRowStyle(gridRowStart),\n      '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n      '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n    },\n    children: cells\n  });\n}\nconst SummaryRow$1 = /*#__PURE__*/memo(SummaryRow);\nfunction DataGrid(props, ref) {\n  const {\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCopy,\n    onPaste,\n    enableVirtualization: rawEnableVirtualization,\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId\n  } = props;\n  const defaultRenderers = useDefaultRenderers();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus$1 = renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? renderSortStatus;\n  const renderCheckbox$1 = renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? renderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(() => new Map());\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(() => new Map());\n  const [copiedCell, setCopiedCell] = useState(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState(null);\n  const getColumnWidth = useCallback(column => {\n    return resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;\n  }, [measuredColumnWidths, resizedColumnWidths]);\n  const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const [selectedPosition, setSelectedPosition] = useState(() => ({\n    idx: -1,\n    rowIdx: minRowIdx - 1,\n    mode: 'SELECT'\n  }));\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const focusSinkRef = useRef(null);\n  const shouldFocusCellRef = useRef(false);\n  const isTreeGrid = role === 'treegrid';\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n  const defaultGridComponents = useMemo(() => ({\n    renderCheckbox: renderCheckbox$1,\n    renderSortStatus: renderSortStatus$1\n  }), [renderCheckbox$1, renderSortStatus$1]);\n  const allRowsSelected = useMemo(() => {\n    const {\n      length\n    } = rows;\n    return length !== 0 && selectedRows != null && rowKeyGetter != null && selectedRows.size >= length && rows.every(row => selectedRows.has(rowKeyGetter(row)));\n  }, [rows, selectedRows, rowKeyGetter]);\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n  const {\n    gridTemplateColumns,\n    handleColumnResize\n  } = useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize);\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const scrollHeight = headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(({\n    idx,\n    rowIdx\n  }) => {\n    selectCell({\n      rowIdx: minRowIdx + rowIdx - 1,\n      idx\n    });\n  });\n  useLayoutEffect(() => {\n    if (!selectedCellIsWithinSelectionBounds || isSamePosition(selectedPosition, prevSelectedPosition.current)) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n    prevSelectedPosition.current = selectedPosition;\n    if (selectedPosition.idx === -1) {\n      focusSinkRef.current.focus({\n        preventScroll: true\n      });\n      scrollIntoView(focusSinkRef.current);\n    }\n  });\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    focusCellOrCellContent();\n  });\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({\n      idx,\n      rowIdx\n    }) {\n      const scrollToIdx = idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx = rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({\n          idx: scrollToIdx,\n          rowIdx: scrollToRowIdx\n        });\n      }\n    },\n    selectCell\n  }));\n  const setDraggedOverRowIdx = useCallback(rowIdx => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n  function selectRow(args) {\n    if (!onSelectedRowsChange) return;\n    assertIsValidKeyGetter(rowKeyGetter);\n    if (args.type === 'HEADER') {\n      const newSelectedRows = new Set(selectedRows);\n      for (const row of rows) {\n        const rowKey = rowKeyGetter(row);\n        if (args.checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n    const {\n      row,\n      checked,\n      isShiftClick\n    } = args;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n    onSelectedRowsChange(newSelectedRows);\n  }\n  function handleKeyDown(event) {\n    const {\n      idx,\n      rowIdx,\n      mode\n    } = selectedPosition;\n    if (mode === 'EDIT') return;\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown({\n        mode: 'SELECT',\n        row,\n        column: columns[idx],\n        rowIdx,\n        selectCell\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n    const {\n      keyCode\n    } = event;\n    if (selectedCellIsWithinViewportBounds && (onPaste != null || onCopy != null) && isCtrlKeyHeldDown(event)) {\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        if (window.getSelection()?.isCollapsed === false) return;\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n  function handleScroll(event) {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n  function updateRow(column, rowIdx, row) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n  function handleCopy() {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const sourceRow = rows[rowIdx];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({\n      row: sourceRow,\n      columnKey: sourceColumnKey\n    });\n    onCopy?.({\n      sourceRow,\n      sourceColumnKey\n    });\n  }\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rows[rowIdx];\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n  function handleCellInput(event) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const {\n      key,\n      shiftKey\n    } = event;\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({\n        type: 'ROW',\n        row,\n        checked: !selectedRows.has(rowKey),\n        isShiftClick: false\n      });\n      event.preventDefault();\n      return;\n    }\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({\n        idx,\n        rowIdx\n      }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n  function isColIdxWithinSelectionBounds(idx) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n  function isRowIdxWithinViewportBounds(rowIdx) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n  function isCellWithinSelectionBounds({\n    idx,\n    rowIdx\n  }) {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n  function isCellWithinEditBounds({\n    idx,\n    rowIdx\n  }) {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n  function isCellWithinViewportBounds({\n    idx,\n    rowIdx\n  }) {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n  function isCellEditable(position) {\n    return isCellWithinEditBounds(position) && isSelectedCellEditable({\n      columns,\n      rows,\n      selectedPosition: position\n    });\n  }\n  function selectCell(position, enableEditor) {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n    const row = rows[position.rowIdx];\n    const samePosition = isSamePosition(selectedPosition, position);\n    if (enableEditor && isCellEditable(position)) {\n      setSelectedPosition({\n        ...position,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      });\n    } else if (samePosition) {\n      scrollIntoView(getCellToScroll(gridRef.current));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({\n        ...position,\n        mode: 'SELECT'\n      });\n    }\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row,\n        column: columns[position.idx]\n      });\n    }\n  }\n  function getNextPosition(key, ctrlKey, shiftKey) {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n    switch (key) {\n      case 'ArrowUp':\n        return {\n          idx,\n          rowIdx: rowIdx - 1\n        };\n      case 'ArrowDown':\n        return {\n          idx,\n          rowIdx: rowIdx + 1\n        };\n      case leftKey:\n        return {\n          idx: idx - 1,\n          rowIdx\n        };\n      case rightKey:\n        return {\n          idx: idx + 1,\n          rowIdx\n        };\n      case 'Tab':\n        return {\n          idx: idx + (shiftKey ? -1 : 1),\n          rowIdx\n        };\n      case 'Home':\n        if (isRowSelected) return {\n          idx,\n          rowIdx: minRowIdx\n        };\n        return {\n          idx: 0,\n          rowIdx: ctrlKey ? minRowIdx : rowIdx\n        };\n      case 'End':\n        if (isRowSelected) return {\n          idx,\n          rowIdx: maxRowIdx\n        };\n        return {\n          idx: maxColIdx,\n          rowIdx: ctrlKey ? maxRowIdx : rowIdx\n        };\n      case 'PageUp':\n        {\n          if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n          const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n          return {\n            idx,\n            rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0\n          };\n        }\n      case 'PageDown':\n        {\n          if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n          const nextRowY = getRowTop(rowIdx) + clientHeight;\n          return {\n            idx,\n            rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1\n          };\n        }\n      default:\n        return selectedPosition;\n    }\n  }\n  function navigate(event) {\n    const {\n      key,\n      shiftKey\n    } = event;\n    let cellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (canExitGrid({\n        shiftKey,\n        maxColIdx,\n        minRowIdx,\n        maxRowIdx,\n        selectedPosition\n      })) {\n        commitEditorChanges();\n        return;\n      }\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n    event.preventDefault();\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || key === 'Tab' && !shiftKey,\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n    selectCell(nextSelectedCellPosition);\n  }\n  function getDraggedOverCellIdx(currentRowIdx) {\n    if (draggedOverRowIdx === undefined) return;\n    const {\n      rowIdx\n    } = selectedPosition;\n    const isDraggedOver = rowIdx < draggedOverRowIdx ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n  function focusCellOrCellContent() {\n    const cell = getCellToScroll(gridRef.current);\n    if (cell === null) return;\n    scrollIntoView(cell);\n    const elementToFocus = cell.querySelector('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({\n      preventScroll: true\n    });\n  }\n  function renderDragHandle() {\n    if (onFill == null || selectedPosition.mode === 'EDIT' || !isCellWithinViewportBounds(selectedPosition)) {\n      return;\n    }\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n    const columnWidth = getColumnWidth(column);\n    return /*#__PURE__*/jsx(DragHandle, {\n      gridRowStart: headerAndTopSummaryRowsCount + rowIdx + 1,\n      rows: rows,\n      column: column,\n      columnWidth: columnWidth,\n      maxColIdx: maxColIdx,\n      isLastRow: rowIdx === maxRowIdx,\n      selectedPosition: selectedPosition,\n      isCellEditable: isCellEditable,\n      latestDraggedOverRowIdx: latestDraggedOverRowIdx,\n      onRowsChange: onRowsChange,\n      onClick: focusCellOrCellContent,\n      onFill: onFill,\n      setDragging: setDragging,\n      setDraggedOverRowIdx: setDraggedOverRowIdx\n    });\n  }\n  function getCellEditor(rowIdx) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n    const {\n      idx,\n      row\n    } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n    const closeEditor = shouldFocusCell => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({\n        idx,\n        rowIdx\n      }) => ({\n        idx,\n        rowIdx,\n        mode: 'SELECT'\n      }));\n    };\n    const onRowChange = (row, commitChanges, shouldFocusCell) => {\n      if (commitChanges) {\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition(position => ({\n          ...position,\n          row\n        }));\n      }\n    };\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      closeEditor(false);\n    }\n    return /*#__PURE__*/jsx(EditCell, {\n      column: column,\n      colSpan: colSpan,\n      row: row,\n      rowIdx: rowIdx,\n      onRowChange: onRowChange,\n      closeEditor: closeEditor,\n      onKeyDown: onCellKeyDown,\n      navigate: navigate\n    }, column.key);\n  }\n  function getRowViewportColumns(rowIdx) {\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (selectedColumn !== undefined && selectedPosition.rowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n      return selectedPosition.idx > colOverscanEndIdx ? [...viewportColumns, selectedColumn] : [...viewportColumns.slice(0, lastFrozenColumnIndex + 1), selectedColumn, ...viewportColumns.slice(lastFrozenColumnIndex + 1)];\n    }\n    return viewportColumns;\n  }\n  function getViewportRows() {\n    const rowElements = [];\n    const {\n      idx: selectedIdx,\n      rowIdx: selectedRowIdx\n    } = selectedPosition;\n    const startRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx ? rowOverscanStartIdx - 1 : rowOverscanStartIdx;\n    const endRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx ? rowOverscanEndIdx + 1 : rowOverscanEndIdx;\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport = viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          rowColumns = [selectedColumn];\n        } else {\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n      rowElements.push(renderRow(key, {\n        'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n        'aria-selected': isSelectable ? isRowSelected : undefined,\n        rowIdx,\n        row,\n        viewportColumns: rowColumns,\n        isRowSelected,\n        onCellClick: onCellClickLatest,\n        onCellDoubleClick: onCellDoubleClickLatest,\n        onCellContextMenu: onCellContextMenuLatest,\n        rowClass,\n        gridRowStart,\n        height: getRowHeight(rowIdx),\n        copiedCellIdx: copiedCell !== null && copiedCell.row === row ? columns.findIndex(c => c.key === copiedCell.columnKey) : undefined,\n        selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n        draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n        setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n        lastFrozenColumnIndex,\n        onRowChange: handleFormatterRowChangeLatest,\n        selectCell: selectCellLatest,\n        selectedCellEditor: getCellEditor(rowIdx)\n      }));\n    }\n    return rowElements;\n  }\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({\n      idx: -1,\n      rowIdx: minRowIdx - 1,\n      mode: 'SELECT'\n    });\n    setDraggedOverRowIdx(undefined);\n  }\n  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n  return /*#__PURE__*/jsxs(\"div\", {\n    role: role,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    \"aria-multiselectable\": isSelectable ? true : undefined,\n    \"aria-colcount\": columns.length,\n    \"aria-rowcount\": ariaRowCount,\n    className: clsx(rootClassname, className, isDragging && viewportDraggingClassname),\n    style: {\n      ...style,\n      scrollPaddingInlineStart: selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined ? `${totalFrozenColumnWidth}px` : undefined,\n      scrollPaddingBlock: isRowIdxWithinViewportBounds(selectedPosition.rowIdx) || scrollToPosition?.rowIdx !== undefined ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${bottomSummaryRowsCount * summaryRowHeight}px` : undefined,\n      gridTemplateColumns,\n      gridTemplateRows: templateRows,\n      '--rdg-header-row-height': `${headerRowHeight}px`,\n      '--rdg-summary-row-height': `${summaryRowHeight}px`,\n      '--rdg-scroll-height': `${scrollHeight}px`,\n      '--rdg-sign': isRtl ? -1 : 1,\n      ...layoutCssVars\n    },\n    dir: direction,\n    ref: gridRef,\n    onScroll: handleScroll,\n    onKeyDown: handleKeyDown,\n    \"data-testid\": testId,\n    children: [/*#__PURE__*/jsx(DataGridDefaultRenderersProvider, {\n      value: defaultGridComponents,\n      children: /*#__PURE__*/jsxs(RowSelectionChangeProvider, {\n        value: selectRowLatest,\n        children: [/*#__PURE__*/jsxs(RowSelectionProvider, {\n          value: allRowsSelected,\n          children: [Array.from({\n            length: groupedColumnHeaderRowsCount\n          }, (_, index) => /*#__PURE__*/jsx(GroupedColumnHeaderRow$1, {\n            rowIdx: index + 1,\n            level: -groupedColumnHeaderRowsCount + index,\n            columns: getRowViewportColumns(minRowIdx + index),\n            selectedCellIdx: selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined,\n            selectCell: selectHeaderCellLatest\n          }, index)), /*#__PURE__*/jsx(HeaderRow$1, {\n            rowIdx: headerRowsCount,\n            columns: getRowViewportColumns(mainHeaderRowIdx),\n            onColumnResize: handleColumnResizeLatest,\n            onColumnsReorder: onColumnsReorderLastest,\n            sortColumns: sortColumns,\n            onSortColumnsChange: onSortColumnsChangeLatest,\n            lastFrozenColumnIndex: lastFrozenColumnIndex,\n            selectedCellIdx: selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined,\n            selectCell: selectHeaderCellLatest,\n            shouldFocusGrid: !selectedCellIsWithinSelectionBounds,\n            direction: direction\n          })]\n        }), rows.length === 0 && noRowsFallback ? noRowsFallback : /*#__PURE__*/jsxs(Fragment, {\n          children: [topSummaryRows?.map((row, rowIdx) => {\n            const gridRowStart = headerRowsCount + 1 + rowIdx;\n            const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n            const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n            const top = headerRowsHeight + summaryRowHeight * rowIdx;\n            return /*#__PURE__*/jsx(SummaryRow$1, {\n              \"aria-rowindex\": gridRowStart,\n              rowIdx: summaryRowIdx,\n              gridRowStart: gridRowStart,\n              row: row,\n              top: top,\n              bottom: undefined,\n              viewportColumns: getRowViewportColumns(summaryRowIdx),\n              lastFrozenColumnIndex: lastFrozenColumnIndex,\n              selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n              isTop: true,\n              selectCell: selectCellLatest\n            }, rowIdx);\n          }), getViewportRows(), bottomSummaryRows?.map((row, rowIdx) => {\n            const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n            const summaryRowIdx = rows.length + rowIdx;\n            const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n            const top = clientHeight > totalRowHeight ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx) : undefined;\n            const bottom = top === undefined ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx) : undefined;\n            return /*#__PURE__*/jsx(SummaryRow$1, {\n              \"aria-rowindex\": ariaRowCount - bottomSummaryRowsCount + rowIdx + 1,\n              rowIdx: summaryRowIdx,\n              gridRowStart: gridRowStart,\n              row: row,\n              top: top,\n              bottom: bottom,\n              viewportColumns: getRowViewportColumns(summaryRowIdx),\n              lastFrozenColumnIndex: lastFrozenColumnIndex,\n              selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n              isTop: false,\n              selectCell: selectCellLatest\n            }, rowIdx);\n          })]\n        })]\n      })\n    }), renderDragHandle(), renderMeasuringCells(viewportColumns), isTreeGrid && /*#__PURE__*/jsx(\"div\", {\n      ref: focusSinkRef,\n      tabIndex: isGroupRowFocused ? 0 : -1,\n      className: clsx(focusSinkClassname, isGroupRowFocused && [rowSelected, lastFrozenColumnIndex !== -1 && rowSelectedWithFrozenCell], !isRowIdxWithinViewportBounds(selectedPosition.rowIdx) && focusSinkHeaderAndSummaryClassname),\n      style: {\n        gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n      }\n    }), scrollToPosition !== null && /*#__PURE__*/jsx(ScrollToCell, {\n      scrollToPosition: scrollToPosition,\n      setScrollToCellPosition: setScrollToPosition,\n      gridElement: gridRef.current\n    })]\n  });\n}\nfunction getCellToScroll(gridEl) {\n  return gridEl.querySelector(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\nfunction isSamePosition(p1, p2) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\nconst DataGrid$1 = /*#__PURE__*/forwardRef(DataGrid);\nfunction GroupCell({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  isGroupByColumn,\n  toggleGroup: toggleGroupWrapper\n}) {\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    tabIndex: tabIndex,\n    className: getCellClassname(column),\n    style: {\n      ...getCellStyle(column),\n      cursor: isLevelMatching ? 'pointer' : 'default'\n    },\n    onClick: isLevelMatching ? toggleGroup : undefined,\n    onFocus: onFocus,\n    children: (!isGroupByColumn || isLevelMatching) && column.renderGroupCell?.({\n      groupKey,\n      childRows,\n      column,\n      row,\n      isExpanded,\n      tabIndex: childTabIndex,\n      toggleGroup\n    })\n  }, column.key);\n}\nconst GroupCell$1 = /*#__PURE__*/memo(GroupCell);\nconst groupRow = \"g1yxluv37-0-0-beta-43\";\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\nfunction GroupedRow({\n  className,\n  row,\n  rowIdx,\n  viewportColumns,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  gridRowStart,\n  height,\n  groupBy,\n  toggleGroup,\n  ...props\n}) {\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n  function handleSelectGroup() {\n    selectCell({\n      rowIdx,\n      idx: -1\n    });\n  }\n  return /*#__PURE__*/jsx(RowSelectionProvider, {\n    value: isRowSelected,\n    children: /*#__PURE__*/jsx(\"div\", {\n      role: \"row\",\n      \"aria-level\": row.level + 1,\n      \"aria-setsize\": row.setSize,\n      \"aria-posinset\": row.posInSet + 1,\n      \"aria-expanded\": row.isExpanded,\n      className: clsx(rowClassname, groupRowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, className, selectedCellIdx === -1 && rowSelectedClassname),\n      onClick: handleSelectGroup,\n      style: getRowStyle(gridRowStart, height),\n      ...props,\n      children: viewportColumns.map(column => /*#__PURE__*/jsx(GroupCell$1, {\n        id: row.id,\n        groupKey: row.groupKey,\n        childRows: row.childRows,\n        isExpanded: row.isExpanded,\n        isCellSelected: selectedCellIdx === column.idx,\n        column: column,\n        row: row,\n        groupColumnIndex: idx,\n        toggleGroup: toggleGroup,\n        isGroupByColumn: groupBy.includes(column.key)\n      }, column.key))\n    })\n  });\n}\nconst GroupedRow$1 = /*#__PURE__*/memo(GroupedRow);\nfunction TreeDataGrid({\n  columns: rawColumns,\n  rows: rawRows,\n  rowHeight: rawRowHeight,\n  rowKeyGetter: rawRowKeyGetter,\n  onCellKeyDown: rawOnCellKeyDown,\n  onRowsChange,\n  selectedRows: rawSelectedRows,\n  onSelectedRowsChange: rawOnSelectedRowsChange,\n  renderers,\n  groupBy: rawGroupBy,\n  rowGrouper,\n  expandedGroupIds,\n  onExpandedGroupIdsChange,\n  ...props\n}, ref) {\n  const defaultRenderers = useDefaultRenderers();\n  const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n  const isRtl = props.direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n  const {\n    columns,\n    groupBy\n  } = useMemo(() => {\n    const columns = [...rawColumns].sort(({\n      key: aKey\n    }, {\n      key: bKey\n    }) => {\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n      if (rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy.includes(bKey)) return 1;\n      return 0;\n    });\n    const groupBy = [];\n    for (const [index, column] of columns.entries()) {\n      if (rawGroupBy.includes(column.key)) {\n        groupBy.push(column.key);\n        columns[index] = {\n          ...column,\n          frozen: true,\n          renderCell: () => null,\n          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n          editable: false\n        };\n      }\n    }\n    return {\n      columns,\n      groupBy\n    };\n  }, [rawColumns, rawGroupBy]);\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0) return [undefined, rawRows.length];\n    const groupRows = (rows, [groupByKey, ...remainingGroupByKeys], startRowIndex) => {\n      let groupRowsCount = 0;\n      const groups = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0 ? [childRows, childRows.length] : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1);\n        groups[key] = {\n          childRows,\n          childGroups,\n          startRowIndex: startRowIndex + groupRowsCount\n        };\n        groupRowsCount += childRowsCount + 1;\n      }\n      return [groups, groupRowsCount];\n    };\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n  const [rows, isGroupRow] = useMemo(() => {\n    const allGroupRows = new Set();\n    if (!groupedRows) return [rawRows, isGroupRow];\n    const flattenedRows = [];\n    const expandGroup = (rows, parentId, level) => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds.has(id);\n        const {\n          childRows,\n          childGroups,\n          startRowIndex\n        } = rows[groupKey];\n        const groupRow = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n    function isGroupRow(row) {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n  const rowHeight = useMemo(() => {\n    if (typeof rawRowHeight === 'function') {\n      return row => {\n        if (isGroupRow(row)) {\n          return rawRowHeight({\n            type: 'GROUP',\n            row\n          });\n        }\n        return rawRowHeight({\n          type: 'ROW',\n          row\n        });\n      };\n    }\n    return rawRowHeight;\n  }, [isGroupRow, rawRowHeight]);\n  const getParentRowAndIndex = useCallback(row => {\n    const rowIdx = rows.indexOf(row);\n    for (let i = rowIdx - 1; i >= 0; i--) {\n      const parentRow = rows[i];\n      if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n        return [parentRow, i];\n      }\n    }\n    return undefined;\n  }, [isGroupRow, rows]);\n  const rowKeyGetter = useCallback(row => {\n    if (isGroupRow(row)) {\n      return row.id;\n    }\n    if (typeof rawRowKeyGetter === 'function') {\n      return rawRowKeyGetter(row);\n    }\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const {\n        startRowIndex,\n        childRows\n      } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      return startRowIndex + groupIndex + 1;\n    }\n    return rows.indexOf(row);\n  }, [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]);\n  const selectedRows = useMemo(() => {\n    if (rawSelectedRows == null) return null;\n    assertIsValidKeyGetter(rawRowKeyGetter);\n    const selectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      if (isGroupRow(row)) {\n        const isGroupRowSelected = row.childRows.every(cr => rawSelectedRows.has(rawRowKeyGetter(cr)));\n        if (isGroupRowSelected) {\n          selectedRows.add(row.id);\n        }\n      }\n    }\n    return selectedRows;\n  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);\n  function onSelectedRowsChange(newSelectedRows) {\n    if (!rawOnSelectedRowsChange) return;\n    assertIsValidKeyGetter(rawRowKeyGetter);\n    const newRawSelectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      const key = rowKeyGetter(row);\n      if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          for (const cr of row.childRows) {\n            newRawSelectedRows.delete(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.delete(key);\n        }\n      } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          for (const cr of row.childRows) {\n            newRawSelectedRows.add(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.add(key);\n        }\n      }\n    }\n    rawOnSelectedRowsChange(newRawSelectedRows);\n  }\n  function handleKeyDown(args, event) {\n    rawOnCellKeyDown?.(args, event);\n    if (event.isGridDefaultPrevented()) return;\n    if (args.mode === 'EDIT') return;\n    const {\n      column,\n      rowIdx,\n      selectCell\n    } = args;\n    const idx = column?.idx ?? -1;\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) return;\n    if (idx === -1 && (event.key === leftKey && row.isExpanded || event.key === rightKey && !row.isExpanded)) {\n      event.preventDefault();\n      event.preventGridDefault();\n      toggleGroup(row.id);\n    }\n    if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        event.preventGridDefault();\n        selectCell({\n          idx,\n          rowIdx: parentRowAndIndex[1]\n        });\n      }\n    }\n    if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n      event.preventGridDefault();\n    }\n  }\n  function handleRowsChange(updatedRows, {\n    indexes,\n    column\n  }) {\n    if (!onRowsChange) return;\n    const updatedRawRows = [...rawRows];\n    const rawIndexes = [];\n    for (const index of indexes) {\n      const rawIndex = rawRows.indexOf(rows[index]);\n      updatedRawRows[rawIndex] = updatedRows[index];\n      rawIndexes.push(rawIndex);\n    }\n    onRowsChange(updatedRawRows, {\n      indexes: rawIndexes,\n      column\n    });\n  }\n  function toggleGroup(groupId) {\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(groupId)) {\n      newExpandedGroupIds.delete(groupId);\n    } else {\n      newExpandedGroupIds.add(groupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n  function renderRow(key, {\n    row,\n    rowClass,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onRowChange,\n    lastFrozenColumnIndex,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    setDraggedOverRowIdx,\n    selectedCellEditor,\n    ...rowProps\n  }) {\n    if (isGroupRow(row)) {\n      const {\n        startRowIndex\n      } = row;\n      return /*#__PURE__*/jsx(GroupedRow$1, {\n        ...rowProps,\n        \"aria-rowindex\": headerAndTopSummaryRowsCount + startRowIndex + 1,\n        row: row,\n        groupBy: groupBy,\n        toggleGroup: toggleGroupLatest\n      }, key);\n    }\n    let ariaRowIndex = rowProps['aria-rowindex'];\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const {\n        startRowIndex,\n        childRows\n      } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n    }\n    return rawRenderRow(key, {\n      ...rowProps,\n      'aria-rowindex': ariaRowIndex,\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor\n    });\n  }\n  return /*#__PURE__*/jsx(DataGrid$1, {\n    ...props,\n    role: \"treegrid\",\n    \"aria-rowcount\": rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0),\n    ref: ref,\n    columns: columns,\n    rows: rows,\n    rowHeight: rowHeight,\n    rowKeyGetter: rowKeyGetter,\n    onRowsChange: handleRowsChange,\n    selectedRows: selectedRows,\n    onSelectedRowsChange: onSelectedRowsChange,\n    onCellKeyDown: handleKeyDown,\n    renderers: {\n      ...renderers,\n      renderRow\n    }\n  });\n}\nfunction isReadonlyArray(arr) {\n  return Array.isArray(arr);\n}\nconst TreeDataGrid$1 = /*#__PURE__*/forwardRef(TreeDataGrid);\nconst textEditorInternalClassname = \"t7vyx3i7-0-0-beta-43\";\nconst textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\nfunction autoFocusAndSelect(input) {\n  input?.focus();\n  input?.select();\n}\nfunction textEditor({\n  row,\n  column,\n  onRowChange,\n  onClose\n}) {\n  return /*#__PURE__*/jsx(\"input\", {\n    className: textEditorClassname,\n    ref: autoFocusAndSelect,\n    value: row[column.key],\n    onChange: event => onRowChange({\n      ...row,\n      [column.key]: event.target.value\n    }),\n    onBlur: () => onClose(true, false)\n  });\n}\nexport { DataGridDefaultRenderersProvider, RowComponent$1 as Row, SELECT_COLUMN_KEY, SelectCellFormatter, SelectColumn, ToggleGroup, TreeDataGrid$1 as TreeDataGrid, DataGrid$1 as default, renderCheckbox, renderHeaderCell, renderSortIcon, renderSortPriority, renderToggleGroup, renderValue, textEditor, useRowSelection };","map":{"version":3,"names":["getColSpan","column","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","undefined","stopPropagation","event","scrollIntoView","element","inline","block","createCellEvent","defaultPrevented","cellEvent","preventGridDefault","isGridDefaultPrevented","Object","setPrototypeOf","getPrototypeOf","nonInputKeys","Set","isCtrlKeyHeldDown","e","ctrlKey","metaKey","key","isDefaultCellInput","vKey","keyCode","has","onEditorNavigation","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","closest","querySelectorAll","length","measuringCellClassname","renderMeasuringCells","viewportColumns","map","minWidth","maxWidth","jsx","className","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","row","rowIdx","isCellEditableUtil","renderEditCell","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","mainHeaderRowIdx","topSummaryRowsCount","type","getNextSelectedCellPosition","moveUp","moveNext","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentPosition","currentIdx","currentRowIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","columnsCount","setColSpan","colIdx","getParentRowIdx","parent","level","setHeaderGroupColAndRowSpan","nextColumn","parentRowIdx","found","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","nextParentRowIdx","canExitGrid","maxColIdx","shiftKey","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","cell","cellClassname","cellFrozen","cellFrozenClassname","getRowStyle","height","getHeaderCellStyle","rowSpan","gridRowEnd","paddingBlockStart","insetBlockStart","gridRowStart","getCellStyle","index","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","clsx","min","max","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","Error","clampColumnWidth","width","getHeaderCellRowSpan","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","renderCheckbox","onChange","props","handleChange","checked","nativeEvent","jsxs","disabled","children","groupCellContent","groupCellContentClassname","caret","caretClassname","renderToggleGroup","ToggleGroup","groupKey","isExpanded","tabIndex","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","renderValue","DataGridDefaultRenderersContext","createContext","DataGridDefaultRenderersProvider","Provider","useDefaultRenderers","useContext","SelectCellFormatter","value","ariaLabel","ariaLabelledBy","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","SELECT_COLUMN_KEY","HeaderRenderer","isRowSelected","onRowSelectionChange","SelectFormatter","isShiftClick","SelectGroupFormatter","SelectColumn","name","resizable","sortable","renderHeaderCell","renderCell","renderGroupCell","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","defaultColumnOptions","getColumnWidth","viewportWidth","scrollLeft","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultCellRenderer","defaultSortable","defaultResizable","defaultDraggable","draggable","headerRowsCount","useMemo","collectColumns","rawColumn","calculatedColumnParent","headerCellClass","push","sort","aKey","frozenA","bKey","frozenB","forEach","updateColumnParent","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","set","columnMetric","get","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useLayoutEffect","window","useEffect","useLayoutEffect$1","useColumnWidths","gridRef","gridWidth","resizedColumnWidths","measuredColumnWidths","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","prevGridWidthRef","useRef","columnsCanFlex","ignorePreviouslyMeasuredColumns","current","newTemplateColumns","columnsToMeasure","gridTemplateColumns","join","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","delete","handleColumnResize","nextWidth","resizingKey","flushSync","newResizedColumnWidths","selector","CSS","escape","measuringCell","querySelector","getBoundingClientRect","useGridDimensions","inlineSize","setInlineSize","useState","blockSize","setBlockSize","horizontalScrollbarHeight","setHorizontalScrollbarHeight","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","initialHorizontalScrollbarHeight","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useLatestFunc","fn","ref","callbackFn","useCallback","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","currentTarget","isFocusable","childTabIndex","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","useViewportRows","rowHeight","scrollTop","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","cellDragHandle","cellDragHandleFrozenClassname","cellDragHandleClassname","DragHandle","columnWidth","latestDraggedOverRowIdx","isCellEditable","onRowsChange","onFill","onClick","setDragging","setDraggedOverRowIdx","handleMouseDown","preventDefault","buttons","addEventListener","onMouseOver","onMouseUp","removeEventListener","handleDragEnd","overRowIdx","startRowIndex","endRowIndex","updateRows","handleDoubleClick","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","columnKey","targetRow","getStyle","marginEnd","isLastColumn","marginInlineEnd","marginBlockEnd","onMouseDown","onDoubleClick","cellEditing","EditCell","onRowChange","closeEditor","navigate","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","mode","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","cellClass","displayCellContent","role","onMouseDownCapture","Fragment","GroupedColumnHeaderCell","isCellSelected","selectCell","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","SortableHeaderCell","renderSortStatus","cellSortableClassname","cellResizable","cellResizableClassname","resizeHandleClassname","cellDraggableClassname","cellDragging","cellDraggingClassname","cellOver","cellOverClassname","HeaderCell","onColumnsReorder","sortColumns","onSortColumnsChange","shouldFocusGrid","direction","dragDropKey","isDragging","setIsDragging","isOver","setIsOver","isRtl","sortIndex","findIndex","sortColumn","ariaSort","renderHeaderCell$1","onPointerDown","pointerType","pointerId","headerCell","parentElement","right","clientX","onPointerMove","onLostPointerCapture","setPointerCapture","onSort","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","handleFocus","onDragStart","dataTransfer","setData","dropEffect","onDragEnd","onDragOver","onDrop","types","includes","sourceKey","getData","onDragEnter","isEventPertinent","onDragLeave","draggableProps","relatedTarget","contains","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","topSummaryRowClassname","bottomSummaryRowClassname","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","useId","cells","HeaderRow$1","memo","GroupedColumnHeaderRow","renderedParents","add","GroupedColumnHeaderRow$1","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","onContextMenu","isEditable","selectCellWrapper","openEditor","handleClick","handleContextMenu","handleRowChange","newRow","Cell$1","Row","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","onMouseEnter","handleDragEnter","RowComponent","forwardRef","RowComponent$1","defaultRenderRow","ScrollToCell","scrollToPosition","gridElement","setScrollToCellPosition","removeScrollToCell","observer","IntersectionObserver","root","threshold","gridColumn","gridRow","arrow","arrowClassname","renderSortIcon","renderSortPriority","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","focusSinkHeaderAndSummaryClassname","summaryCellClassname","SummaryCell","summaryCellClass","renderSummaryCell","SummaryCell$1","summaryRow","topSummaryRow","summaryRowClassname","SummaryRow","bottom","isTop","ariaRowIndex","SummaryRow$1","DataGrid","rowKeyGetter","rawRowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onCellKeyDown","onSelectedCellChange","onScroll","onCopy","onPaste","rawEnableVirtualization","renderers","rawDirection","rawRole","ariaDescribedBy","rawAriaRowCount","testId","defaultRenderers","renderRow","renderSortStatus$1","renderCheckbox$1","noRowsFallback","setScrollTop","setScrollLeft","copiedCell","setCopiedCell","draggedOverRowIdx","setOverRowIdx","setScrollToPosition","gridHeight","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","groupedColumnHeaderRowsCount","setSelectedPosition","prevSelectedPosition","lastSelectedRowIdx","focusSinkRef","shouldFocusCellRef","isTreeGrid","headerRowsHeight","summaryRowsHeight","isSelectable","leftKey","rightKey","ariaRowCount","defaultGridComponents","allRowsSelected","every","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","scrollHeight","handleColumnResizeLatest","onColumnsReorderLastest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectHeaderCellLatest","isSamePosition","focus","preventScroll","focusCellOrCellContent","useImperativeHandle","scrollToCell","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","newSelectedRows","rowKey","previousRowIdx","indexOf","step","Element","isCellEvent","isRowEvent","cKey","getSelection","isCollapsed","handleCopy","handlePaste","handleCellInput","handleScroll","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","originalRow","isColIdxWithinSelectionBounds","isCellWithinEditBounds","enableEditor","samePosition","getCellToScroll","getNextPosition","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","elementToFocus","renderDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","c","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","dir","Array","from","_","summaryRowIdx","isSummaryRowSelected","gridEl","p1","p2","DataGrid$1","GroupCell","id","childRows","groupColumnIndex","isGroupByColumn","toggleGroupWrapper","isLevelMatching","cursor","GroupCell$1","groupRow","groupRowClassname","GroupedRow","groupBy","handleSelectGroup","setSize","posInSet","GroupedRow$1","TreeDataGrid","rawRows","rawRowKeyGetter","rawOnCellKeyDown","rawSelectedRows","rawOnSelectedRowsChange","rawGroupBy","rowGrouper","expandedGroupIds","onExpandedGroupIdsChange","rawRenderRow","toggleGroupLatest","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","groupRowsCount","groups","childGroups","childRowsCount","isGroupRow","allGroupRows","flattenedRows","expandGroup","parentId","isReadonlyArray","keys","getParentRowAndIndex","parentRow","parentRowAndIndex","groupIndex","isGroupRowSelected","cr","newRawSelectedRows","handleRowsChange","updatedRawRows","rawIndexes","rawIndex","groupId","newExpandedGroupIds","rowProps","arr","isArray","TreeDataGrid$1","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor","onBlur"],"sources":["C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\utils\\colSpanUtils.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\utils\\domUtils.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\utils\\eventUtils.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\utils\\keyboardUtils.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\utils\\renderMeasuringCells.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\utils\\selectedCellUtils.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\style\\cell.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\utils\\styleUtils.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\utils\\index.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\cellRenderers\\renderCheckbox.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\cellRenderers\\renderToggleGroup.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\cellRenderers\\renderValue.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\DataGridDefaultRenderersProvider.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\cellRenderers\\SelectCellFormatter.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\hooks\\useRowSelection.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\Columns.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\hooks\\useCalculatedColumns.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\hooks\\useLayoutEffect.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\hooks\\useColumnWidths.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\hooks\\useGridDimensions.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\hooks\\useLatestFunc.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\hooks\\useRovingTabIndex.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\hooks\\useViewportColumns.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\hooks\\useViewportRows.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\DragHandle.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\EditCell.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\GroupedColumnHeaderCell.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\renderHeaderCell.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\HeaderCell.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\style\\row.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\HeaderRow.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\GroupedColumnHeaderRow.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\Cell.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\Row.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\ScrollToCell.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\sortStatus.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\style\\core.ts","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\SummaryCell.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\SummaryRow.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\DataGrid.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\GroupCell.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\GroupRow.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\TreeDataGrid.tsx","C:\\Users\\josem\\Desktop\\ProyectoWeb\\node_modules\\react-data-grid\\src\\editors\\textEditor.tsx"],"sourcesContent":["import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  const vKey = 86;\n  if (isCtrlKeyHeldDown(event) && event.keyCode !== vKey) return false;\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n","import type {\n  CalculatedColumn,\n  CalculatedColumnParent,\n  CellNavigationMode,\n  Maybe,\n  Position\n} from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\n\n// https://github.com/vercel/next.js/issues/56480\nexport function isCellEditableUtil<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  moveUp: boolean;\n  moveNext: boolean;\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  mainHeaderRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex' | 'mainHeaderRowIdx'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (\n    topSummaryRows &&\n    rowIdx > mainHeaderRowIdx &&\n    rowIdx <= topSummaryRowsCount + mainHeaderRowIdx\n  ) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx, rowIdx: currentRowIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n  const columnsCount = columns.length;\n\n  const setColSpan = (moveNext: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  const getParentRowIdx = (parent: CalculatedColumnParent<R, SR>) => {\n    return parent.level + mainHeaderRowIdx;\n  };\n\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      // find the parent at the same row level\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      // find the first reachable parent\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n\n      // keep the current position if there is no parent matching the new row position\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  if (nextRowIdx < mainHeaderRowIdx) {\n    // Find the last reachable parent for the new rowIdx\n    // This check is needed when navigating to a column\n    // that does not have a parent matching the new rowIdx\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning,\n     * layout/paint/style containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n\n    /* Add box-shadow on the last frozen cell */\n    &:nth-last-child(1 of &) {\n      box-shadow: var(--rdg-cell-frozen-box-shadow);\n    }\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\nimport { cellClassname, cellFrozenClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getHeaderCellStyle<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number,\n  rowSpan: number\n): React.CSSProperties {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n\n  return {\n    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan = 1\n): React.CSSProperties {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nexport function getHeaderCellRowSpan<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number\n) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function renderCheckbox({ onChange, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderGroupCellProps } from '../types';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function renderToggleGroup<R, SR>(props: RenderGroupCellProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}: RenderGroupCellProps<R, SR>) {\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span className={groupCellContentClassname} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'HEADER', checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, CalculatedColumnParent, ColumnOrColumnGroup, Omit } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer V> ? Mutable<V>[] : T[P];\n};\n\ninterface WithParent<R, SR> {\n  readonly parent: MutableCalculatedColumnParent<R, SR> | undefined;\n}\n\ntype MutableCalculatedColumnParent<R, SR> = Omit<Mutable<CalculatedColumnParent<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\ntype MutableCalculatedColumn<R, SR> = Omit<Mutable<CalculatedColumn<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> {\n  rawColumns: readonly ColumnOrColumnGroup<R, SR>[];\n  defaultColumnOptions: DataGridProps<R, SR>['defaultColumnOptions'];\n  viewportWidth: number;\n  scrollLeft: number;\n  getColumnWidth: (column: CalculatedColumn<R, SR>) => string | number;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultCellRenderer = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = useMemo((): {\n    readonly columns: readonly CalculatedColumn<R, SR>[];\n    readonly colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    readonly lastFrozenColumnIndex: number;\n    readonly headerRowsCount: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns: MutableCalculatedColumn<R, SR>[] = [];\n\n    collectColumns(rawColumns, 1);\n\n    function collectColumns(\n      rawColumns: readonly ColumnOrColumnGroup<R, SR>[],\n      level: number,\n      parent?: MutableCalculatedColumnParent<R, SR>\n    ) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent: MutableCalculatedColumnParent<R, SR> = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n\n        const frozen = rawColumn.frozen ?? false;\n\n        const column: MutableCalculatedColumn<R, SR> = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultCellRenderer\n        };\n\n        columns.push(column);\n\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // TODO: sort columns to keep them grouped if they have a parent\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultCellRenderer,\n    defaultResizable,\n    defaultSortable,\n    defaultDraggable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n\nfunction updateColumnParent<R, SR>(\n  column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>,\n  index: number,\n  level: number\n) {\n  if (level < column.level) {\n    column.level = level;\n  }\n\n  if (column.parent !== undefined) {\n    const { parent } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current!.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - initialHorizontalScrollbarHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      const { clientHeight, offsetHeight } = gridRef.current!;\n\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n        setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, horizontalScrollbarHeight] as const;\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getCellStyle } from './utils';\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    --rdg-drag-handle-size: 8px;\n    z-index: 0;\n    cursor: move;\n    inline-size: var(--rdg-drag-handle-size);\n    block-size: var(--rdg-drag-handle-size);\n    background-color: var(--rdg-selection-color);\n    place-self: end;\n\n    &:hover {\n      --rdg-drag-handle-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleFrozenClassname = css`\n  @layer rdg.DragHandle {\n    z-index: 1;\n    position: sticky;\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  gridRowStart: number;\n  column: CalculatedColumn<R, SR>;\n  columnWidth: number | string;\n  maxColIdx: number;\n  isLastRow: boolean;\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onClick: () => void;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  gridRowStart,\n  rows,\n  column,\n  columnWidth,\n  maxColIdx,\n  isLastRow,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  onClick,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  const { idx, rowIdx } = selectedPosition;\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    // keep the focus on the cell\n    event.preventDefault();\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  function getStyle(): React.CSSProperties {\n    const colSpan = column.colSpan?.({ type: 'ROW', row: rows[rowIdx] }) ?? 1;\n    const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n\n    return {\n      ...style,\n      gridRowStart,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart\n        ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)`\n        : undefined\n    };\n  }\n\n  return (\n    <div\n      style={getStyle()}\n      className={clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname)}\n      onClick={onClick}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              rowIdx,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getHeaderCellRowSpan, getHeaderCellStyle } from './utils';\nimport type { CalculatedColumnParent } from './types';\nimport type { GroupedColumnHeaderRowProps } from './GroupedColumnHeaderRow';\nimport { cellClassname } from './style/cell';\n\ntype SharedGroupedColumnHeaderRowProps<R, SR> = Pick<\n  GroupedColumnHeaderRowProps<R, SR>,\n  'rowIdx' | 'selectCell'\n>;\n\ninterface GroupedColumnHeaderCellProps<R, SR> extends SharedGroupedColumnHeaderRowProps<R, SR> {\n  column: CalculatedColumnParent<R, SR>;\n  isCellSelected: boolean;\n}\n\nexport default function GroupedColumnHeaderCell<R, SR>({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: GroupedColumnHeaderCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { colSpan } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n\n  function onClick() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={index}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={clsx(cellClassname, column.headerCellClass)}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan\n      }}\n      onFocus={onFocus}\n      onClick={onClick}\n    >\n      {column.name}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCellClassname = css`\n  @layer rdg.SortableHeaderCell {\n    display: flex;\n  }\n`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell sortDirection={sortDirection} priority={priority}>\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'priority'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  sortDirection,\n  priority,\n  children\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  return (\n    <span className={headerSortCellClassname}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport {\n  clampColumnWidth,\n  getCellClassname,\n  getCellStyle,\n  getHeaderCellRowSpan,\n  getHeaderCellStyle,\n  stopPropagation\n} from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultRenderHeaderCell from './renderHeaderCell';\n\nconst cellSortableClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: pointer;\n  }\n`;\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nexport const resizeHandleClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellDraggableClassname = 'rdg-cell-draggable';\n\nconst cellDragging = css`\n  opacity: 0.5;\n`;\n\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\n\nconst cellOver = css`\n  background-color: var(--rdg-header-draggable-background-color);\n`;\n\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n  | 'onColumnsReorder'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  rowIdx: number;\n  isCellSelected: boolean;\n  dragDropKey: string;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  dragDropKey\n}: HeaderCellProps<R, SR>) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n  const isRtl = direction === 'rtl';\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n  const { sortable, resizable, draggable } = column;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellSortableClassname]: sortable,\n    [cellResizableClassname]: resizable,\n    [cellDraggableClassname]: draggable,\n    [cellDraggingClassname]: isDragging,\n    [cellOverClassname]: isOver\n  });\n\n  const renderHeaderCell = column.renderHeaderCell ?? defaultRenderHeaderCell;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    // Fix column resizing on a draggable column in FF\n    event.preventDefault();\n\n    const { currentTarget, pointerId } = event;\n    const headerCell = currentTarget.parentElement!;\n    const { right, left } = headerCell.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    function onPointerMove(event: PointerEvent) {\n      const { right, left } = headerCell.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick(event: React.MouseEvent<HTMLSpanElement>) {\n    selectCell({ idx: column.idx, rowIdx });\n\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onDoubleClick() {\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell({ idx: 0, rowIdx });\n    }\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    event.dataTransfer.setData(dragDropKey, column.key);\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragging(true);\n  }\n\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    if (event.dataTransfer.types.includes(dragDropKey)) {\n      const sourceKey = event.dataTransfer.getData(dragDropKey);\n      if (sourceKey !== column.key) {\n        event.preventDefault();\n        onColumnsReorder?.(sourceKey, column.key);\n      }\n    }\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  let draggableProps: React.HTMLAttributes<HTMLDivElement> | undefined;\n  if (draggable) {\n    draggableProps = {\n      draggable: true,\n      /* events fired on the draggable target */\n      onDragStart,\n      onDragEnd,\n      /* events fired on the drop targets */\n      onDragOver,\n      onDragEnter,\n      onDragLeave,\n      onDrop\n    };\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        ...getCellStyle(column, colSpan)\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onKeyDown={sortable ? onKeyDown : undefined}\n      {...draggableProps}\n    >\n      {renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        tabIndex: childTabIndex\n      })}\n\n      {resizable && (\n        <div\n          className={resizeHandleClassname}\n          onClick={stopPropagation}\n          onDoubleClick={onDoubleClick}\n          onPointerDown={onPointerDown}\n        />\n      )}\n    </div>\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n\nexport const topSummaryRowClassname = 'rdg-top-summary-row';\n\nexport const bottomSummaryRowClassname = 'rdg-bottom-summary-row';\n","import { memo, useId } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan } from './utils';\nimport type { CalculatedColumn, Direction, Position } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange' | 'onColumnsReorder'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  rowIdx: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (position: Position) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const dragDropKey = useId();\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        rowIdx={rowIdx}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onColumnsReorder={onColumnsReorder}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n        dragDropKey={dragDropKey}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, Position } from './types';\nimport GroupedColumnHeaderCell from './GroupedColumnHeaderCell';\nimport { headerRowClassname } from './HeaderRow';\n\nexport interface GroupedColumnHeaderRowProps<R, SR> {\n  rowIdx: number;\n  level: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectCell: (position: Position) => void;\n  selectedCellIdx: number | undefined;\n}\n\nfunction GroupedColumnHeaderRow<R, SR>({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}: GroupedColumnHeaderRowProps<R, SR>) {\n  const cells = [];\n  const renderedParents = new Set<CalculatedColumnParent<R, SR>>();\n\n  for (const column of columns) {\n    let { parent } = column;\n\n    if (parent === undefined) continue;\n\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const { idx } = parent;\n      cells.push(\n        <GroupedColumnHeaderCell<R, SR>\n          key={idx}\n          column={parent}\n          rowIdx={rowIdx}\n          isCellSelected={selectedCellIdx === idx}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(GroupedColumnHeaderRow) as <R, SR>(\n  props: GroupedColumnHeaderRowProps<R, SR>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditableUtil } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n  const isEditable = isCellEditableUtil(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { forwardRef, memo, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport Cell from './Cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RenderRowProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RenderRowProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridElement,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridElement: HTMLDivElement;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { cell } from './cell';\nimport { bottomSummaryRowClassname, row, topSummaryRowClassname } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 90.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 17.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg.Defaults {\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n  }\n\n  @layer rdg.Root {\n    ${lightTheme}\n    --rdg-selection-color: #66afe9;\n    --rdg-font-size: 14px;\n    --rdg-cell-frozen-box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n\n    display: grid;\n\n    color-scheme: var(--rdg-color-scheme, light dark);\n\n    /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n    /* We set a stacking context so internal elements don't render on top of external elements. */\n    /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n    contain: content;\n    content-visibility: auto;\n    block-size: 350px;\n    border: 1px solid var(--rdg-border-color);\n    box-sizing: border-box;\n    overflow: auto;\n    background-color: var(--rdg-background-color);\n    color: var(--rdg-color);\n    font-size: var(--rdg-font-size);\n\n    /* needed on Firefox to fix scrollbars */\n    &::before {\n      content: '';\n      grid-column: 1/-1;\n      grid-row: 1/-1;\n    }\n\n    &.rdg-dark {\n      --rdg-color-scheme: dark;\n      ${darkTheme}\n    }\n\n    &.rdg-light {\n      --rdg-color-scheme: light;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      &:not(.rdg-light) {\n        ${darkTheme}\n      }\n    }\n\n    > :nth-last-child(1 of .${topSummaryRowClassname}) {\n      > .${cell} {\n        border-block-end: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n\n    > :nth-child(1 of .${bottomSummaryRowClassname}) {\n      > .${cell} {\n        border-block-start: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport {\n  bottomSummaryRowClassname,\n  rowClassname,\n  rowSelectedClassname,\n  topSummaryRowClassname\n} from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [`${topSummaryRowClassname} ${topSummaryRow}`]: isTop,\n          [bottomSummaryRowClassname]: !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { forwardRef, useCallback, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport type { Key, KeyboardEvent, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  RowSelectionChangeProvider,\n  RowSelectionProvider,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useLayoutEffect,\n  useViewportColumns,\n  useViewportRows\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  CellSelectArgs,\n  Column,\n  ColumnOrColumnGroup,\n  CopyEvent,\n  Direction,\n  FillEvent,\n  Maybe,\n  PasteEvent,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport GroupedColumnHeaderRow from './GroupedColumnHeaderRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'renderCell' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable' | 'draggable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly ColumnOrColumnGroup<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: R) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  onCellKeyDown?: Maybe<(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n  /** Function called whenever cell selection is changed */\n  onSelectedCellChange?: Maybe<(args: CellSelectArgs<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n  /** Called when a column is reordered */\n  onColumnsReorder?: Maybe<(sourceColumnKey: string, targetColumnKey: string) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R, rowIdx: number) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n\n  const getColumnWidth = useCallback(\n    (column: CalculatedColumn<R, SR>) => {\n      return (\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width\n      );\n    },\n    [measuredColumnWidths, resizedColumnWidths]\n  );\n\n  const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const shouldFocusCellRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus\n    }),\n    [renderCheckbox, renderSortStatus]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const scrollHeight =\n    headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(({ idx, rowIdx }: Position) => {\n    selectCell({ rowIdx: minRowIdx + rowIdx - 1, idx });\n  });\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      focusSinkRef.current!.focus({ preventScroll: true });\n      scrollIntoView(focusSinkRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    focusCellOrCellContent();\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    if (args.type === 'HEADER') {\n      const newSelectedRows = new Set(selectedRows);\n      for (const row of rows) {\n        const rowKey = rowKeyGetter(row);\n        if (args.checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const { row, checked, isShiftClick } = args;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event)\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        // copy highlighted text only\n        if (window.getSelection()?.isCollapsed === false) return;\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rows[rowIdx];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rows[rowIdx];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ type: 'ROW', row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinEditBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinEditBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    const row = rows[position.rowIdx];\n    const samePosition = isSamePosition(selectedPosition, position);\n\n    if (enableEditor && isCellEditable(position)) {\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (samePosition) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row,\n        column: columns[position.idx]\n      });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || (key === 'Tab' && !shiftKey),\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function focusCellOrCellContent() {\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  }\n\n  function renderDragHandle() {\n    if (\n      onFill == null ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinViewportBounds(selectedPosition)\n    ) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n\n    const columnWidth = getColumnWidth(column);\n\n    return (\n      <DragHandle\n        gridRowStart={headerAndTopSummaryRowsCount + rowIdx + 1}\n        rows={rows}\n        column={column}\n        columnWidth={columnWidth}\n        maxColIdx={maxColIdx}\n        isLastRow={rowIdx === maxRowIdx}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onClick={focusCellOrCellContent}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-scroll-height': `${scrollHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <RowSelectionChangeProvider value={selectRowLatest}>\n          <RowSelectionProvider value={allRowsSelected}>\n            {Array.from({ length: groupedColumnHeaderRowsCount }, (_, index) => (\n              <GroupedColumnHeaderRow\n                key={index}\n                rowIdx={index + 1}\n                level={-groupedColumnHeaderRowsCount + index}\n                columns={getRowViewportColumns(minRowIdx + index)}\n                selectedCellIdx={\n                  selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined\n                }\n                selectCell={selectHeaderCellLatest}\n              />\n            ))}\n            <HeaderRow\n              rowIdx={headerRowsCount}\n              columns={getRowViewportColumns(mainHeaderRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              onColumnsReorder={onColumnsReorderLastest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </RowSelectionProvider>\n          {rows.length === 0 && noRowsFallback ? (\n            noRowsFallback\n          ) : (\n            <>\n              {topSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerRowsCount + 1 + rowIdx;\n                const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top = headerRowsHeight + summaryRowHeight * rowIdx;\n\n                return (\n                  <SummaryRow\n                    key={rowIdx}\n                    aria-rowindex={gridRowStart}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={undefined}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n              {getViewportRows()}\n              {bottomSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n                const summaryRowIdx = rows.length + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top =\n                  clientHeight > totalRowHeight\n                    ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                    : undefined;\n                const bottom =\n                  top === undefined\n                    ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                    : undefined;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={bottom}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop={false}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n            </>\n          )}\n        </RowSelectionChangeProvider>\n      </DataGridDefaultRenderersProvider>\n\n      {renderDragHandle()}\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridElement={gridRef.current!}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\n\ninterface GroupCellProps<R, SR> {\n  id: string;\n  groupKey: unknown;\n  childRows: readonly R[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n  isExpanded: boolean;\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n  isGroupByColumn: boolean;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  isGroupByColumn,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!isGroupByColumn || isLevelMatching) &&\n        column.renderGroupCell?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          tabIndex: childTabIndex,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\nimport type { BaseRenderRowProps, GroupRow } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child, .${cellFrozen}),\n    > :nth-last-child(n + 2 of .${cellFrozen}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\ninterface GroupRowRendererProps<R, SR> extends BaseRenderRowProps<R, SR> {\n  row: GroupRow<R>;\n  groupBy: readonly string[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  className,\n  row,\n  rowIdx,\n  viewportColumns,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  gridRowStart,\n  height,\n  groupBy,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n\n  function handleSelectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={row.level + 1} // aria-level is 1-based\n        aria-setsize={row.setSize}\n        aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n        aria-expanded={row.isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          selectedCellIdx === -1 && rowSelectedClassname,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={row.id}\n            groupKey={row.groupKey}\n            childRows={row.childRows}\n            isExpanded={row.isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n            isGroupByColumn={groupBy.includes(column.key)}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { forwardRef, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\n\nimport { useLatestFunc } from './hooks';\nimport { assertIsValidKeyGetter, isCtrlKeyHeldDown } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  Column,\n  GroupRow,\n  Maybe,\n  Omit,\n  RenderRowProps,\n  RowHeightArgs,\n  RowsChangeData\n} from './types';\nimport { renderToggleGroup } from './cellRenderers';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport DataGrid from './DataGrid';\nimport type { DataGridHandle, DataGridProps } from './DataGrid';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\nimport GroupedRow from './GroupRow';\nimport { defaultRenderRow } from './Row';\n\nexport interface TreeDataGridProps<R, SR = unknown, K extends Key = Key>\n  extends Omit<\n    DataGridProps<R, SR, K>,\n    'columns' | 'role' | 'aria-rowcount' | 'rowHeight' | 'onFill'\n  > {\n  columns: readonly Column<R, SR>[];\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  groupBy: readonly string[];\n  rowGrouper: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange: (expandedGroupIds: Set<unknown>) => void;\n}\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\nfunction TreeDataGrid<R, SR, K extends Key>(\n  {\n    columns: rawColumns,\n    rows: rawRows,\n    rowHeight: rawRowHeight,\n    rowKeyGetter: rawRowKeyGetter,\n    onCellKeyDown: rawOnCellKeyDown,\n    onRowsChange,\n    selectedRows: rawSelectedRows,\n    onSelectedRowsChange: rawOnSelectedRowsChange,\n    renderers,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    ...props\n  }: TreeDataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n  const isRtl = props.direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  const { columns, groupBy } = useMemo(() => {\n    const columns = [...rawColumns].sort(({ key: aKey }, { key: bKey }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy.includes(bKey)) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const groupBy: string[] = [];\n    for (const [index, column] of columns.entries()) {\n      if (rawGroupBy.includes(column.key)) {\n        groupBy.push(column.key);\n        columns[index] = {\n          ...column,\n          frozen: true,\n          renderCell: () => null,\n          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n          editable: false\n        };\n      }\n    }\n\n    return { columns, groupBy };\n  }, [rawColumns, rawGroupBy]);\n\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds.has(id);\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const rowHeight = useMemo(() => {\n    if (typeof rawRowHeight === 'function') {\n      return (row: R | GroupRow<R>): number => {\n        if (isGroupRow(row)) {\n          return rawRowHeight({ type: 'GROUP', row });\n        }\n        return rawRowHeight({ type: 'ROW', row });\n      };\n    }\n\n    return rawRowHeight;\n  }, [isGroupRow, rawRowHeight]);\n\n  const getParentRowAndIndex = useCallback(\n    (row: R | GroupRow<R>) => {\n      const rowIdx = rows.indexOf(row);\n      for (let i = rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n          return [parentRow, i] as const;\n        }\n      }\n\n      return undefined;\n    },\n    [isGroupRow, rows]\n  );\n\n  const rowKeyGetter = useCallback(\n    (row: R | GroupRow<R>) => {\n      if (isGroupRow(row)) {\n        return row.id;\n      }\n\n      if (typeof rawRowKeyGetter === 'function') {\n        return rawRowKeyGetter(row);\n      }\n\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        const { startRowIndex, childRows } = parentRowAndIndex[0];\n        const groupIndex = childRows.indexOf(row);\n        return startRowIndex + groupIndex + 1;\n      }\n\n      return rows.indexOf(row);\n    },\n    [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]\n  );\n\n  const selectedRows = useMemo((): Maybe<ReadonlySet<Key>> => {\n    if (rawSelectedRows == null) return null;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const selectedRows = new Set<Key>(rawSelectedRows);\n    for (const row of rows) {\n      if (isGroupRow(row)) {\n        // select parent row if all the children are selected\n        const isGroupRowSelected = row.childRows.every((cr) =>\n          rawSelectedRows.has(rawRowKeyGetter(cr))\n        );\n        if (isGroupRowSelected) {\n          selectedRows.add(row.id);\n        }\n      }\n    }\n\n    return selectedRows;\n  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);\n\n  function onSelectedRowsChange(newSelectedRows: Set<Key>) {\n    if (!rawOnSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const newRawSelectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      const key = rowKeyGetter(row);\n      if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // select all children if the parent row is selected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.delete(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.delete(key as K);\n        }\n      } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // unselect all children if the parent row is unselected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.add(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.add(key as K);\n        }\n      }\n    }\n\n    rawOnSelectedRowsChange(newRawSelectedRows);\n  }\n\n  function handleKeyDown(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) {\n    rawOnCellKeyDown?.(args, event);\n    if (event.isGridDefaultPrevented()) return;\n\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const idx = column?.idx ?? -1;\n    const row = rows[rowIdx];\n\n    if (!isGroupRow(row)) return;\n    if (\n      idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((event.key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (event.key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      event.preventGridDefault();\n      toggleGroup(row.id);\n    }\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        event.preventGridDefault();\n        selectCell({ idx, rowIdx: parentRowAndIndex[1] });\n      }\n    }\n\n    // Prevent copy/paste on group rows\n    if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n      event.preventGridDefault();\n    }\n  }\n\n  function handleRowsChange(updatedRows: R[], { indexes, column }: RowsChangeData<R, SR>) {\n    if (!onRowsChange) return;\n    const updatedRawRows = [...rawRows];\n    const rawIndexes: number[] = [];\n    for (const index of indexes) {\n      const rawIndex = rawRows.indexOf(rows[index] as R);\n      updatedRawRows[rawIndex] = updatedRows[index];\n      rawIndexes.push(rawIndex);\n    }\n    onRowsChange(updatedRawRows, {\n      indexes: rawIndexes,\n      column\n    });\n  }\n\n  function toggleGroup(groupId: unknown) {\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(groupId)) {\n      newExpandedGroupIds.delete(groupId);\n    } else {\n      newExpandedGroupIds.add(groupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function renderRow(\n    key: Key,\n    {\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor,\n      ...rowProps\n    }: RenderRowProps<R, SR>\n  ) {\n    if (isGroupRow(row)) {\n      const { startRowIndex } = row;\n      return (\n        <GroupedRow\n          key={key}\n          {...rowProps}\n          aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1}\n          row={row}\n          groupBy={groupBy}\n          toggleGroup={toggleGroupLatest}\n        />\n      );\n    }\n\n    let ariaRowIndex = rowProps['aria-rowindex'];\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const { startRowIndex, childRows } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n    }\n\n    return rawRenderRow(key, {\n      ...rowProps,\n      'aria-rowindex': ariaRowIndex,\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor\n    });\n  }\n\n  return (\n    <DataGrid<R, SR, Key>\n      {...props}\n      role=\"treegrid\"\n      aria-rowcount={\n        rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0)\n      }\n      ref={ref}\n      columns={columns}\n      rows={rows as R[]} // TODO: check types\n      rowHeight={rowHeight}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={handleRowsChange}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={onSelectedRowsChange}\n      onCellKeyDown={handleKeyDown}\n      renderers={{\n        ...renderers,\n        renderRow\n      }}\n    />\n  );\n}\n\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport default forwardRef(TreeDataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: TreeDataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { RenderEditCellProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: RenderEditCellProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true, false)}\n    />\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}